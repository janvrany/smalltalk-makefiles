_makefiles_dir=$(dir $(abspath $(lastword $(MAKEFILE_LIST))))
_hooks_dir=$(shell git rev-parse --git-path hooks)

$(_hooks_dir)/%: $(_makefiles_dir)/hooks/%
	ln -s $(shell realpath --relative-to $(_hooks_dir) $<) $@


git-hooks-install: $(_hooks_dir)/commit-msg $(_hooks_dir)/pre-commit



#
# Helper template to clone prerequisite project from git
#
# Usage:
#
#  $(eval $(call git-clone-local,<Variable_Holding_Directory_Name>,<Repository>,(Branch>))
#
define git-clone-local =
$$($(1)):
	mkdir -p $$(dir $$($(1)))
	git clone --recurse-submodules -b $(3) $(2) $$($(1))
	git -C $$($(1)) remote set-url --push origin $(subst https://github.com/,git@github.com:,$(2))

prereq:: $$($(1))

GNUmakefile.local::
	@echo "# To load $$(notdir $$($(1))) from local directory, set $(1)" >> $$@
	@echo "# variable to directory where $$(notdir $$($(1))) is cloned. If unset (default)" >> $$@
	@echo "# it will be cloned from $(2)." >> $$@
ifneq ($(shell git rev-parse --show-toplevel 2> /dev/null),)
	@echo "# $(1)=$$(shell realpath --relative-to=. $$(shell git rev-parse --show-toplevel))/../$$(notdir $$($(1)))" >> $$@
else
	@echo "# $(1)=.../$$(notdir $$($(1)))" >> $$@
endif
	@echo "" >> $$@
endef

# Keep the following VIM modeline as last line!
# vi:ft=make