# A helper makefile to download Pharo

# Pharo version to (automagically) download
PHARO_DOWNLOAD_VERSION ?= 80
PHARO_DOWNLOAD_VERSION_90_PLUS :=$(shell expr $(PHARO_DOWNLOAD_VERSION) \>= 90)
PHARO_DOWNLOAD_URL := http://files.pharo.org/get-files/$(PHARO_DOWNLOAD_VERSION)
#
# Automagically configure VM options depending on the OS
#

UNAME := $(shell uname | tr "[:upper:]" "[:lower:]")
ifneq (,$(findstring linux,$(UNAME)))
  ifeq ($(PHARO_DOWNLOAD_VERSION_90_PLUS),1)
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo-vm-Linux-$(shell uname -m)-stable.zip
  else
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo64-linux-stable.zip
  endif
	PHARO_VM_DEFAULT=./pharo
else ifneq (,$(findstring darwin,$(UNAME)))
  ifeq ($(PHARO_DOWNLOAD_VERSION_90_PLUS),1)
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo-vm-Darwin-$(shell uname -m)-stable.zip
  else
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo64-mac-stable.zip
  endif
	PHARO_VM_DEFAULT=./Pharo.app/Contents/MacOS/Pharo
else ifneq (,$(findstring mingw,$(UNAME)))
  ifeq ($(PHARO_DOWNLOAD_VERSION_90_PLUS),1)
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo-vm-Windows-$(shell uname -m)-stable.zip
  else
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo64-win-stable.zip
  endif
	PHARO_VM_DEFAULT=./pharo.exe
else ifneq (,$(findstring msys,$(UNAME)))
  ifeq ($(PHARO_DOWNLOAD_VERSION_90_PLUS),1)
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo-vm-Windows-$(shell uname -m)-stable.zip
  else
	PHARO_VM_URL := $(PHARO_DOWNLOAD_URL)/pharo64-win-stable.zip
  endif
	PHARO_VM_DEFAULT=./pharo.exe
else
	$(error "Unknown OS: $(UNAME)")
endif

#
# Automagically configure image options
#
ifeq ($(PHARO_DOWNLOAD_VERSION_90_PLUS),1)
	PHARO_IMAGE_URL := $(PHARO_DOWNLOAD_URL)/pharoImage-$(shell uname -m).zip
else
	PHARO_IMAGE_URL := $(PHARO_DOWNLOAD_URL)/pharo64.zip
endif

#
# If PHARO_IMAGE is not defined, download it
#
ifndef PHARO_IMAGE
PHARO_IMAGE=Pharo.image

Pharo.image:
	rm -f PharoImage.zip
	curl -s -o PharoImage.zip "$(PHARO_IMAGE_URL)"
	unzip -n PharoImage.zip
	mv `ls Pharo*SNAPSHOT*.image` "Pharo.image"
	mv `ls Pharo*SNAPSHOT*.changes` "Pharo.changes"
	rm PharoImage.zip
endif


#
# If PHARO_VM is not defined, download it
#
ifndef PHARO_VM
PHARO_VM=$(PHARO_VM_DEFAULT)

$(PHARO_VM_DEFAULT):
	rm -f PharoVM.zip
	curl -s -o PharoVM.zip "$(PHARO_VM_URL)"
	unzip -n PharoVM.zip
	rm PharoVM.zip
endif
PHARO_VM_HEADLESS ?= $(PHARO_VM) --headless

#
# Integration with UsablePharo8
#
# https://github.com/shingarov/UsablePharo8
#
ifndef USABLE_PHARO_DIR
USABLE_PHARO_DIR    := ../3rdparty/UsablePharo8
USABLE_PHARO_URL    ?= git@github.com:shingarov/UsablePharo8
USABLE_PHARO_BRANCH ?= master

USABLE_PHARO_IMAGE  ?= $(USABLE_PHARO_DIR)/UsablePharo.image

$(USABLE_PHARO_DIR):
	mkdir -p $@
	git clone --recurse-submodules -b $(USABLE_PHARO_BRANCH) $(USABLE_PHARO_URL) $(USABLE_PHARO_DIR)

$(USABLE_PHARO_DIR)/UsablePharo.image: $(PHARO_VM) | $(USABLE_PHARO_DIR)
	make -C $(USABLE_PHARO_DIR) PHARO_VM=$(abspath $(PHARO_VM)) PHARO_DOWNLOAD_VERSION=$(PHARO_DOWNLOAD_VERSION)

clean::
	if [ -d $(USABLE_PHARO_DIR) ]; then make -C $(USABLE_PHARO_DIR) clean; fi

mrproper::
	if [ -d $(USABLE_PHARO_DIR) ]; then make -C $(USABLE_PHARO_DIR) mrproper; fi
endif

prereq:: $(PHARO_VM) $(PHARO_IMAGE)

clean::
	rm -f  *Test.xml *.fuel
	rm -fr pharo-local

mrproper:: clean
	rm -rf Pharo* pharo* icon-packs bin lib

GNUmakefile.local::
	@echo "# Pharo tunables. There's no need to change anything," >> $@
	@echo "# suitable defaults are provided." >> $@
	@echo "" >> $@
	@echo "# To use custom, pre-configured Pharo image, set PHARO_IMAGE" >> $@
	@echo "# variable to desired image. If undefined (default), base Pharo" >> $@
	@echo "# image is downloaded from Pharo website." >> $@
	@echo "# PHARO_IMAGE=$(shell realpath --relative-to=. $(shell git rev-parse --show-toplevel))/../UsablePharo8/UsablePharo.image" >> $@
	@echo "" >> $@
	@echo "# To use UsablePharo8 as base image, uncomment following line." >> $@
	@echo '# PHARO_IMAGE=$$(USABLE_PHARO_IMAGE)' >> $@
	@echo "" >> $@
	@echo "# To use custom Pharo VM, set PHARO_VM variable to desired vm." >> $@
	@echo "# If undefined (default), Pharo stable VM is downloaded from" >> $@
	@echo "# Pharo website." >> $@
	@echo "# PHARO_VM=pharo" >> $@
	@echo "" >> $@
	@echo "# To download specific Pharo version (when PHARO_IMAGE or PHARO_VM" >> $@
	@echo "# is not specified), set PHARO_DOWNLOAD_VERSION. Defaults to 80." >> $@
	@echo "# Note, that versions other then 80 may (will) not work." >> $@
	@echo "# PHARO_DOWNLOAD_VERSION=80" >> $@
	@echo "" >> $@

#
# Macro to copy image Pharo image. It should be as simple
# as copying a file, but one has to handle .sources file
# in case the source image is in different directory.
#
# Usage:
#
#   $(call pharo-copy-image,<src_image>,<dst_image>)
#
define pharo-copy-image =
	$(PHARO_VM_HEADLESS) $(1) save $(dir $(abspath $(firstword $(MAKEFILE_LIST))))/$(subst .image,,$(strip $(2)))
	PHARO_SOURCES=`$(PHARO_VM_HEADLESS) $(1) eval "Smalltalk sourcesName" | tr -d \'`; \
	if [ ! -f "$(dir $(abspath $(firstword $(MAKEFILE_LIST))))/$$(basename $$PHARO_SOURCES)" ]; then \
		ln    "$$PHARO_SOURCES" "$(dir $(abspath $(firstword $(MAKEFILE_LIST))))/$$(basename $$PHARO_SOURCES)" \
		|| cp "$$PHARO_SOURCES" "$(dir $(abspath $(firstword $(MAKEFILE_LIST))))/$$(basename $$PHARO_SOURCES)"; \
	fi
	$(PHARO_VM_HEADLESS) $(2) eval --save "SystemWindow closeTopWindow."
endef

#
# Macro to load locally cloned project to Pharo image
#
# Usage:
#
#   $(call pharo-load-local,<image>,<baseline>,<src directory>)
#
define pharo-load-local =
	$(PHARO_VM_HEADLESS) $(1) eval --save "(IceRepositoryCreator new location: '$(shell realpath --relative-to=. $(shell git -C $(3) rev-parse --show-toplevel))' asFileReference; createRepository) register" || rm $@
    $(PHARO_VM_HEADLESS) $(1) eval --save "Metacello new baseline: '$(strip $(2))'; repository: 'tonel://$(strip $(3))'; onConflictUseLoaded; load." || rm $@
endef

# Keep the following VIM modeline as last line!
# vi:ft=make